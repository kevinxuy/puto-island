APT1 公寓休息区域
要做一个游戏，窗口大小为600 x 1000 pixels.
分为两层，map层和UI层。

Map层：
背景地图用 ./assets/apt/a1map.png, 居中
地图用鼠标drag来scroll.
要注意边界条件，不要scroll出地图的边界。

地图位置定义：
根据Restaurant1的模式，需要在地图上定义6个关键点作为小人活动区域。
建议坐标（需要根据实际地图调整）：
a1_1: (250, 300) - 公寓位置1
a1_2: (350, 350) - 公寓位置2
a1_3: (450, 400) - 公寓位置3
a1_4: (500, 300) - 公寓位置4
a1_5: (400, 250) - 公寓位置5
a1_6: (300, 400) - 公寓位置6

路径定义：
路径连接规则（双向连接）：
- a1_1 连接 a1_2, a1_6
- a1_2 连接 a1_1, a1_3, a1_5
- a1_3 连接 a1_2, a1_4, a1_6
- a1_4 连接 a1_3, a1_5
- a1_5 连接 a1_2, a1_4, a1_6
- a1_6 连接 a1_1, a1_3, a1_5
路径寻找算法：使用BFS（广度优先搜索）计算最短路径。

小人（Character）系统：
生成规则：
- 在6个公寓位置中随机选择spawn位置
- 生成间隔：每1秒spawn一个小人
- 小人类型：随机选择c1到c9（对应./assets/characters/目录下的9种小人）
- 小人尺寸：0.4倍缩放
- 移动速度：0.5像素/帧

小人状态系统：
- MOVING：正常移动状态
- AT_DESTINATION：到达目的地，停留庆祝

小人动画系统：
- 每个小人有4个方向的动画（左、右、下、上）
- 每个方向4帧，每帧显示250毫秒
- 文件命名：cx_y-z.png（x=角色编号1-9，y=方向1-4，z=帧数1-4）
- 方向定义：1=左，2=右，3=下，4=上

小人行为逻辑：
1. 目的地选择：随机选择 a1_1 到 a1_6 之一（不同于spawn位置）
2. 路径计算：使用BFS算法计算从当前位置到目的地的最短路径
3. 生命周期：到达目的地后停留3秒后消失

小人图标显示规则：
- 移动时：根据目的地显示 ./assets/sleepy.png（公寓休息主题）
- 到达目的地时：顶着 ./assets/coin.png（停留3秒）

小人到达目的地行为：
1. 到达目的地后立即停止移动
2. 状态变为AT_DESTINATION
3. 头顶图标变为coin
4. 停留3秒后从游戏中移除

公寓升级系统：
物品定义：
- 5个可升级公寓设施，对应5个公寓建筑
- 每个物品初始状态为level 0
- 最高可升级到level 5
- 物品中心坐标：
  - 物品1: (299, 347)
  - 物品2: (549, 431)
  - 物品3: (738, 416)
  - 物品4: (360, 240)
  - 物品5: (548, 256)

升级动画系统：
1. 升级到level 1-4时：
   - 循环显示3次建造动画（每次1秒）
   - 动画序列：construction1-5.png，每张0.2秒
   - 显示尺寸：200x200
   - 动画结束后显示construction.png（200x200）
2. 升级到level 5时：
   - construction.png消失
   - 播放烟花动画：fireworks1-6.png，每张0.1秒
   - 显示尺寸：400x500
   - 之后显示对应的完成图片（a1.png到a5.png，原始尺寸）

UI层：

等级显示系统：
- 初始值：A1 = 0
- 显示位置：窗口左上角 (10, 10)
- 显示格式："Level = A1"（A1为数值）
- 字体大小：30
- 字体颜色：红色

返回按钮：
- 位置：(550, 50)
- 尺寸：30x30
- 图片：./assets/back.png
- 功能：点击返回主地图（运行main_game.py）

升级按钮系统：
- 5个升级按钮，位于窗口底部
- 按钮样式：米黄色背景，金色边框
- 按钮尺寸：90x90
- 按钮位置（左上角）：
  - 按钮1: (50, 800)
  - 按钮2: (150, 800)
  - 按钮3: (250, 800)
  - 按钮4: (350, 800)
  - 按钮5: (450, 800)
- 按钮图标（64x64，居中显示）：
  - ./assets/apt/a1_icon.png
  - ./assets/apt/a2_icon.png
  - ./assets/apt/a3_icon.png
  - ./assets/apt/a4_icon.png
  - ./assets/apt/a5_icon.png

进度条系统：
- 每个按钮上方24像素处有进度条
- 尺寸：90x18
- 分成5个格子，金色边框
- 初始状态：所有格子为红色
- 每升一级，一个格子变绿色
- level 5时所有格子变绿色

地图自动居中（动画效果）：
- 点击升级按钮时，地图会平滑滚动让对应建筑居中显示
- 动画时长：0.5秒
- 使用ease-in-out cubic缓动函数，实现自然的加速减速效果
- 如果在动画过程中开始拖拽地图，动画会立即取消
- 始终遵守地图边界限制

等级完成系统（重要功能）：
- 检测条件：当a1, a2, a3, a4, a5全部到达5级
- 弹出祝贺窗口：
  - 窗口尺寸：300x200
  - 窗口位置：屏幕中央
  - 背景：白色，黑色边框(3px)
  - 文字内容："Congratulations, You've Upgraded!"
  - OK按钮：金色背景，黑色边框，位于窗口底部
- 点击OK后的行为：
  - A1等级加1（Level = A1数值增加）
  - 所有建筑的level重置为0
  - 进度条恢复初始状态（全部变回红色）
  - 重要：已建成的建筑图片(a1.png至a5.png)保持显示，不消失
  - 祝贺窗口关闭，可继续游戏

技术实现要点：
1. 使用pygame开发
2. 帧率：60 FPS
3. 坐标系：左上角为(0,0)
4. 渲染顺序（重要）：
   - 第一层：背景地图
   - 第二层：已完成的建筑图片(a1.png等)和静态construction图片
   - 第三层：小人
   - 第四层：动画层（construction动画和fireworks动画）- 确保不被建筑图片遮挡
   - 第五层：UI层（按钮、等级显示、祝贺窗口等）
5. 小人的z-index：在美术层之上，UI层之下
6. 使用subprocess.Popen打开子游戏文件
7. 主游戏文件：apt1.py
8. 动画优先级：正在播放的动画必须显示在所有静态建筑图片之上

修改优化记录（2025-07-31）：
1. 统一了文档格式，与Temple和Restaurant系列保持一致
2. 明确了小人状态系统（2种状态：MOVING和AT_DESTINATION）
3. 详细说明了公寓小人的特殊行为（类似Restaurant模式，纯庆祝）
4. 添加了地图平滑居中动画说明
5. 补充了进度条系统的详细说明
6. 整理了坐标系统和路径连接规则（建议值，需要根据实际地图调整）
7. 新增等级显示系统（左上角红色Level = A1显示）
8. 新增等级完成系统（全5级后弹出祝贺窗口，A1增加，重置进度）
9. 修正渲染顺序问题（动画层在建筑图片之上，避免被遮挡）
10. 明确了建筑保持机制（升级后建筑图片永久保留）
11. 明确了小人生成规则（1秒间隔，0.4倍缩放，3秒停留）
12. 使用sleepy图标符合公寓休息主题

备注：
- 本文档基于Restaurant1模式制作
- 地图位置坐标需要根据实际a1map.png调整
- 小人行为完全按照Restaurant1的庆祝模式实现

修改记录（2025-08-06）：
================

### 1. 建筑显示逻辑修改
**问题**: 建筑在某些条件下不显示
**解决方案**: 修改了 Building 类的 draw() 方法，建筑现在在以下条件下显示最终形态：
- 当个体建筑等级 = 5 时
- 当个体建筑等级 > 0 时（显示建造中图像，等级1-4）
- 当 APT1 整体等级 (A1) > 0 时（所有建筑显示最终形态）

**修改位置**: 
- Building.draw() 方法 (第204-225行)
- Game.draw() 方法中的建筑绘制逻辑 (第388-397行)

### 2. 建筑等级初始化修复
**问题**: 进入 APT1.py 时，建筑等级进度条总是显示为0
**解决方案**: 在游戏初始化时从 game_manager 加载保存的建筑等级

**修改位置**:
- Game.__init__() 方法中的建筑创建部分 (第292-302行)

**关键代码**:
```python
# Building.draw() 方法签名更新
def draw(self, screen, map_obj, apt1_level=0):
    # apt1_level 参数用于检查整体等级
    
# 显示逻辑
elif self.showing_final or self.level == 5 or apt1_level > 0:
    # 显示最终建筑图像
    
# 初始化时加载等级
for i, center in enumerate(BUILDING_CENTERS):
    building = Building(i, center)
    structure_id = f'a{i+1}'
    saved_level = game_manager.get_structure_level('apt1', structure_id)
    building.level = saved_level
    if saved_level == 5:
        building.showing_final = True
```